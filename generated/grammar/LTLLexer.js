// Generated from grammar/LTL.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,31,357,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
0,3,0,73,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,83,8,1,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,3,2,95,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,3,3,111,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,119,8,4,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,139,
8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,153,8,6,1,7,1,7,
1,7,1,8,1,8,1,8,1,8,3,8,162,8,8,1,9,1,9,1,9,1,9,3,9,168,8,9,1,10,1,10,1,
10,1,10,1,10,1,10,1,10,1,10,3,10,178,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,
11,200,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
1,12,3,12,215,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,1,13,1,13,1,13,3,13,234,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,251,8,14,1,15,1,15,1,15,
1,15,1,15,3,15,258,8,15,1,16,1,16,1,16,1,16,3,16,264,8,16,1,17,1,17,1,17,
3,17,269,8,17,1,18,1,18,1,18,1,18,5,18,275,8,18,10,18,12,18,278,9,18,1,18,
1,18,1,19,1,19,1,19,1,19,5,19,286,8,19,10,19,12,19,289,9,19,1,19,1,19,1,
20,1,20,1,20,1,20,5,20,297,8,20,10,20,12,20,300,9,20,1,20,1,20,1,21,1,21,
5,21,306,8,21,10,21,12,21,309,9,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,
25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,5,28,328,8,28,10,28,12,28,
331,9,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,5,29,341,8,29,10,29,12,
29,344,9,29,1,29,1,29,1,29,1,29,1,29,1,30,4,30,352,8,30,11,30,12,30,353,
1,30,1,30,2,329,342,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,13,2,0,42,42,8743,
8743,2,0,43,43,8744,8744,2,0,8596,8596,10234,10234,2,0,8594,8594,10233,10233,
2,0,33,33,126,126,2,0,111,111,9711,9711,3,0,94,94,8853,8853,8891,8891,1,
0,124,124,1,0,34,34,1,0,93,93,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
122,3,0,9,10,13,13,32,32,406,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,72,1,0,
0,0,3,82,1,0,0,0,5,94,1,0,0,0,7,110,1,0,0,0,9,118,1,0,0,0,11,138,1,0,0,0,
13,152,1,0,0,0,15,154,1,0,0,0,17,161,1,0,0,0,19,167,1,0,0,0,21,177,1,0,0,
0,23,199,1,0,0,0,25,214,1,0,0,0,27,233,1,0,0,0,29,250,1,0,0,0,31,257,1,0,
0,0,33,263,1,0,0,0,35,268,1,0,0,0,37,270,1,0,0,0,39,281,1,0,0,0,41,292,1,
0,0,0,43,303,1,0,0,0,45,310,1,0,0,0,47,312,1,0,0,0,49,315,1,0,0,0,51,317,
1,0,0,0,53,319,1,0,0,0,55,321,1,0,0,0,57,323,1,0,0,0,59,336,1,0,0,0,61,351,
1,0,0,0,63,64,5,97,0,0,64,65,5,110,0,0,65,73,5,100,0,0,66,73,5,38,0,0,67,
68,5,38,0,0,68,73,5,38,0,0,69,70,5,47,0,0,70,73,5,92,0,0,71,73,7,0,0,0,72,
63,1,0,0,0,72,66,1,0,0,0,72,67,1,0,0,0,72,69,1,0,0,0,72,71,1,0,0,0,73,2,
1,0,0,0,74,75,5,111,0,0,75,83,5,114,0,0,76,83,5,124,0,0,77,78,5,124,0,0,
78,83,5,124,0,0,79,80,5,92,0,0,80,83,5,47,0,0,81,83,7,1,0,0,82,74,1,0,0,
0,82,76,1,0,0,0,82,77,1,0,0,0,82,79,1,0,0,0,82,81,1,0,0,0,83,4,1,0,0,0,84,
85,5,105,0,0,85,86,5,102,0,0,86,95,5,102,0,0,87,88,5,60,0,0,88,89,5,45,0,
0,89,95,5,62,0,0,90,91,5,60,0,0,91,92,5,61,0,0,92,95,5,62,0,0,93,95,7,2,
0,0,94,84,1,0,0,0,94,87,1,0,0,0,94,90,1,0,0,0,94,93,1,0,0,0,95,6,1,0,0,0,
96,97,5,101,0,0,97,98,5,118,0,0,98,99,5,101,0,0,99,100,5,110,0,0,100,101,
5,116,0,0,101,102,5,117,0,0,102,103,5,97,0,0,103,104,5,108,0,0,104,105,5,
108,0,0,105,111,5,121,0,0,106,111,5,70,0,0,107,108,5,60,0,0,108,111,5,62,
0,0,109,111,5,9671,0,0,110,96,1,0,0,0,110,106,1,0,0,0,110,107,1,0,0,0,110,
109,1,0,0,0,111,8,1,0,0,0,112,113,5,102,0,0,113,114,5,97,0,0,114,115,5,108,
0,0,115,116,5,115,0,0,116,119,5,101,0,0,117,119,5,48,0,0,118,112,1,0,0,0,
118,117,1,0,0,0,119,10,1,0,0,0,120,121,5,103,0,0,121,122,5,108,0,0,122,123,
5,111,0,0,123,124,5,98,0,0,124,125,5,97,0,0,125,126,5,108,0,0,126,127,5,
108,0,0,127,139,5,121,0,0,128,129,5,97,0,0,129,130,5,108,0,0,130,131,5,119,
0,0,131,132,5,97,0,0,132,133,5,121,0,0,133,139,5,115,0,0,134,139,5,71,0,
0,135,136,5,91,0,0,136,139,5,93,0,0,137,139,5,9744,0,0,138,120,1,0,0,0,138,
128,1,0,0,0,138,134,1,0,0,0,138,135,1,0,0,0,138,137,1,0,0,0,139,12,1,0,0,
0,140,141,5,105,0,0,141,142,5,109,0,0,142,143,5,112,0,0,143,144,5,108,0,
0,144,145,5,105,0,0,145,146,5,101,0,0,146,153,5,115,0,0,147,148,5,45,0,0,
148,153,5,62,0,0,149,150,5,61,0,0,150,153,5,62,0,0,151,153,7,3,0,0,152,140,
1,0,0,0,152,147,1,0,0,0,152,149,1,0,0,0,152,151,1,0,0,0,153,14,1,0,0,0,154,
155,5,105,0,0,155,156,5,110,0,0,156,16,1,0,0,0,157,158,5,108,0,0,158,159,
5,101,0,0,159,162,5,116,0,0,160,162,5,92,0,0,161,157,1,0,0,0,161,160,1,0,
0,0,162,18,1,0,0,0,163,168,7,4,0,0,164,165,5,110,0,0,165,166,5,111,0,0,166,
168,5,116,0,0,167,163,1,0,0,0,167,164,1,0,0,0,168,20,1,0,0,0,169,170,5,110,
0,0,170,171,5,101,0,0,171,172,5,120,0,0,172,178,5,116,0,0,173,178,5,78,0,
0,174,175,5,40,0,0,175,178,5,41,0,0,176,178,7,5,0,0,177,169,1,0,0,0,177,
173,1,0,0,0,177,174,1,0,0,0,177,176,1,0,0,0,178,22,1,0,0,0,179,180,5,117,
0,0,180,181,5,110,0,0,181,182,5,116,0,0,182,183,5,105,0,0,183,200,5,108,
0,0,184,200,5,85,0,0,185,186,5,83,0,0,186,200,5,85,0,0,187,188,5,115,0,0,
188,189,5,116,0,0,189,190,5,114,0,0,190,191,5,111,0,0,191,192,5,110,0,0,
192,193,5,103,0,0,193,194,5,45,0,0,194,195,5,117,0,0,195,196,5,110,0,0,196,
197,5,116,0,0,197,198,5,105,0,0,198,200,5,108,0,0,199,179,1,0,0,0,199,184,
1,0,0,0,199,185,1,0,0,0,199,187,1,0,0,0,200,24,1,0,0,0,201,215,5,87,0,0,
202,203,5,87,0,0,203,215,5,85,0,0,204,205,5,119,0,0,205,206,5,101,0,0,206,
207,5,97,0,0,207,208,5,107,0,0,208,209,5,45,0,0,209,210,5,117,0,0,210,211,
5,110,0,0,211,212,5,116,0,0,212,213,5,105,0,0,213,215,5,108,0,0,214,201,
1,0,0,0,214,202,1,0,0,0,214,204,1,0,0,0,215,26,1,0,0,0,216,234,5,77,0,0,
217,218,5,83,0,0,218,234,5,82,0,0,219,220,5,115,0,0,220,221,5,116,0,0,221,
222,5,114,0,0,222,223,5,111,0,0,223,224,5,110,0,0,224,225,5,103,0,0,225,
226,5,45,0,0,226,227,5,114,0,0,227,228,5,101,0,0,228,229,5,108,0,0,229,230,
5,101,0,0,230,231,5,97,0,0,231,232,5,115,0,0,232,234,5,101,0,0,233,216,1,
0,0,0,233,217,1,0,0,0,233,219,1,0,0,0,234,28,1,0,0,0,235,251,5,82,0,0,236,
237,5,87,0,0,237,251,5,82,0,0,238,239,5,119,0,0,239,240,5,101,0,0,240,241,
5,97,0,0,241,242,5,107,0,0,242,243,5,45,0,0,243,244,5,114,0,0,244,245,5,
101,0,0,245,246,5,108,0,0,246,247,5,101,0,0,247,248,5,97,0,0,248,249,5,115,
0,0,249,251,5,101,0,0,250,235,1,0,0,0,250,236,1,0,0,0,250,238,1,0,0,0,251,
30,1,0,0,0,252,253,5,116,0,0,253,254,5,114,0,0,254,255,5,117,0,0,255,258,
5,101,0,0,256,258,5,49,0,0,257,252,1,0,0,0,257,256,1,0,0,0,258,32,1,0,0,
0,259,260,5,120,0,0,260,261,5,111,0,0,261,264,5,114,0,0,262,264,7,6,0,0,
263,259,1,0,0,0,263,262,1,0,0,0,264,34,1,0,0,0,265,269,3,37,18,0,266,269,
3,39,19,0,267,269,3,41,20,0,268,265,1,0,0,0,268,266,1,0,0,0,268,267,1,0,
0,0,269,36,1,0,0,0,270,276,5,124,0,0,271,272,5,92,0,0,272,275,5,124,0,0,
273,275,8,7,0,0,274,271,1,0,0,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,
1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,276,1,0,0,0,279,280,5,124,0,
0,280,38,1,0,0,0,281,287,5,34,0,0,282,283,5,92,0,0,283,286,5,34,0,0,284,
286,8,8,0,0,285,282,1,0,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,0,
0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,5,34,0,0,291,
40,1,0,0,0,292,298,5,91,0,0,293,294,5,92,0,0,294,297,5,91,0,0,295,297,8,
9,0,0,296,293,1,0,0,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,
299,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,5,93,0,0,302,42,1,0,
0,0,303,307,7,10,0,0,304,306,7,11,0,0,305,304,1,0,0,0,306,309,1,0,0,0,307,
305,1,0,0,0,307,308,1,0,0,0,308,44,1,0,0,0,309,307,1,0,0,0,310,311,5,61,
0,0,311,46,1,0,0,0,312,313,5,42,0,0,313,314,5,61,0,0,314,48,1,0,0,0,315,
316,5,44,0,0,316,50,1,0,0,0,317,318,5,59,0,0,318,52,1,0,0,0,319,320,5,40,
0,0,320,54,1,0,0,0,321,322,5,41,0,0,322,56,1,0,0,0,323,324,5,47,0,0,324,
325,5,47,0,0,325,329,1,0,0,0,326,328,9,0,0,0,327,326,1,0,0,0,328,331,1,0,
0,0,329,330,1,0,0,0,329,327,1,0,0,0,330,332,1,0,0,0,331,329,1,0,0,0,332,
333,5,10,0,0,333,334,1,0,0,0,334,335,6,28,0,0,335,58,1,0,0,0,336,337,5,47,
0,0,337,338,5,42,0,0,338,342,1,0,0,0,339,341,9,0,0,0,340,339,1,0,0,0,341,
344,1,0,0,0,342,343,1,0,0,0,342,340,1,0,0,0,343,345,1,0,0,0,344,342,1,0,
0,0,345,346,5,42,0,0,346,347,5,47,0,0,347,348,1,0,0,0,348,349,6,29,0,0,349,
60,1,0,0,0,350,352,7,12,0,0,351,350,1,0,0,0,352,353,1,0,0,0,353,351,1,0,
0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,6,30,0,0,356,62,1,0,0,0,28,0,
72,82,94,110,118,138,152,161,167,177,199,214,233,250,257,263,268,274,276,
285,287,296,298,307,329,342,353,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class LTLLexer extends antlr4.Lexer {

    static grammarFileName = "LTL.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, null, null, null, null, null, null, 
                         "'in'", null, null, null, null, null, null, null, 
                         null, null, null, null, null, null, null, "'='", 
                         "'*='", "','", "';'", "'('", "')'" ];
	static symbolicNames = [ null, "CONJUNCTION", "DISJUNCTION", "EQUIVALENCE", 
                          "EVENTUALLY", "FALSE", "GLOBALLY", "IMPLICATION", 
                          "IN", "LET", "NEGATION", "NEXT", "SUNTIL", "WUNTIL", 
                          "SRELEASE", "WRELEASE", "TRUE", "XOR", "ATOMINLINE", 
                          "PIPEATOM", "QUOTEATOM", "BRAKETATOM", "IDENTIFIER", 
                          "EQ", "SEQ", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", 
                          "LINE_COMMENT", "COMMENT", "WS" ];
	static ruleNames = [ "CONJUNCTION", "DISJUNCTION", "EQUIVALENCE", "EVENTUALLY", 
                      "FALSE", "GLOBALLY", "IMPLICATION", "IN", "LET", "NEGATION", 
                      "NEXT", "SUNTIL", "WUNTIL", "SRELEASE", "WRELEASE", 
                      "TRUE", "XOR", "ATOMINLINE", "PIPEATOM", "QUOTEATOM", 
                      "BRAKETATOM", "IDENTIFIER", "EQ", "SEQ", "COMMA", 
                      "SEMICOLON", "LPAREN", "RPAREN", "LINE_COMMENT", "COMMENT", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

LTLLexer.EOF = antlr4.Token.EOF;
LTLLexer.CONJUNCTION = 1;
LTLLexer.DISJUNCTION = 2;
LTLLexer.EQUIVALENCE = 3;
LTLLexer.EVENTUALLY = 4;
LTLLexer.FALSE = 5;
LTLLexer.GLOBALLY = 6;
LTLLexer.IMPLICATION = 7;
LTLLexer.IN = 8;
LTLLexer.LET = 9;
LTLLexer.NEGATION = 10;
LTLLexer.NEXT = 11;
LTLLexer.SUNTIL = 12;
LTLLexer.WUNTIL = 13;
LTLLexer.SRELEASE = 14;
LTLLexer.WRELEASE = 15;
LTLLexer.TRUE = 16;
LTLLexer.XOR = 17;
LTLLexer.ATOMINLINE = 18;
LTLLexer.PIPEATOM = 19;
LTLLexer.QUOTEATOM = 20;
LTLLexer.BRAKETATOM = 21;
LTLLexer.IDENTIFIER = 22;
LTLLexer.EQ = 23;
LTLLexer.SEQ = 24;
LTLLexer.COMMA = 25;
LTLLexer.SEMICOLON = 26;
LTLLexer.LPAREN = 27;
LTLLexer.RPAREN = 28;
LTLLexer.LINE_COMMENT = 29;
LTLLexer.COMMENT = 30;
LTLLexer.WS = 31;



